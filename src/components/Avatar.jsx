/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/model.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";
import * as THREE from "three";

export function Avatar(props) {
  const { animation } = props;
  const group = useRef();
  const { scene } = useGLTF("models/model.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  const { animations: waving } = useFBX("animations/Waving.fbx");
  const { animations: bored } = useFBX("animations/Bored.fbx");
  const { animations: reading } = useFBX("animations/Reading.fbx");
  const { animations: standing } = useFBX("animations/Standing.fbx");
  const { animations: walking } = useFBX("animations/Walking.fbx");
  const { animations: talking } = useFBX("animations/Talking.fbx");

  const namedAnimations = React.useMemo(() => {
    if (
      !waving?.[0] ||
      !bored?.[0] ||
      !reading?.[0] ||
      !standing?.[0] ||
      !walking?.[0] ||
      !talking?.[0]
    ) {
      return [];
    }

    waving[0].name = "Waving";
    bored[0].name = "Bored";
    reading[0].name = "Reading";
    standing[0].name = "Standing";
    walking[0].name = "Walking";
    talking[0].name = "Talking";

    return [waving[0], bored[0], reading[0], standing[0], walking[0], talking[0]];
  }, [waving, bored, reading, standing, walking, talking]);

  const { actions } = useAnimations(namedAnimations, group);

  // useEffect(() => {
  //   if (namedAnimations.length > 0 && !animationsLoaded) {
  //     setAnimationsLoaded(true);
  //   }
  // }, [namedAnimations, animationsLoaded]);

  // useFrame((state) => {
  //   if (!group.current) return;

  //   if (headFollow) {
  //     const head = group.current.getObjectByName("Head");
  //     if (head) {
  //       head.lookAt(state.camera.position);
  //       head.rotation.z = 0;
  //       head.rotation.x = Math.max(-0.5, Math.min(0.5, head.rotation.x));
  //     }
  //   }

  //   if (cursorFollow) {
  //     const targetBone = group.current.getObjectByName("Head");

  //     if (targetBone) {
  //       const mouseX = state.pointer.x;
  //       const mouseY = state.pointer.y;

  //       const targetPosition = new THREE.Vector3(
  //         mouseX * 10,
  //         mouseY * 3 + 0,
  //         5
  //       );
  //       targetBone.lookAt(targetPosition);

  //       targetBone.rotation.z = 0;
  //       targetBone.rotation.x = Math.max(
  //         -0.5,
  //         Math.min(0.5, targetBone.rotation.x)
  //       );
  //     }
  //   }
  // });

  // useEffect(() => {
  //   if (!animationsLoaded || !actions[animation]) return;

  //   const action = actions[animation];
  //   action.reset().fadeIn(0.5).play();

  //   return () => {
  //     if (action) {
  //       action.fadeOut(0.5);
  //     }
  //   };
  // }, [animation, actions, animationsLoaded]);

  // console.log(waving);

  useFrame((state) => {
    if (group.current) {
      const head = group.current.getObjectByName("Head");
      if (head) {
        const target = new THREE.Vector3(
          state.pointer.x * 5,
          state.pointer.y * 2 + 1,
          5
        );
        head.lookAt(target);
        head.rotation.z = 0;
        head.rotation.x = Math.max(-0.5, Math.min(0.5, head.rotation.x));
      }
    }
  });

  // Play the animation passed from props
  useEffect(() => {
    if (actions && actions[animation]) {
      const currentAction = actions[animation];
      Object.values(actions).forEach((action) => {
        if (action !== currentAction) action.fadeOut(0.5);
      });
      currentAction.reset().fadeIn(0.5).play();
    }
  }, [animation, actions]);

  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation-x={-Math.PI / 2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Glasses.geometry}
          material={materials.Wolf3D_Glasses}
          skeleton={nodes.Wolf3D_Glasses.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/model.glb");
